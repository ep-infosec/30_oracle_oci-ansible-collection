---
# Copyright (c) 2020, 2022 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Check pre-requisites
  fail:
    msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_TENANCY_OCID"

# ===========================================================================================
- name: Create a VCN
  oci_network_vcn:
    compartment_id: "{{ compartment_id }}"
    display_name: "{{ vcn_name }}"
    cidr_block: "{{ cidr_block }}"
    dns_label: "{{ dns_label }}"
  register: result

- set_fact:
    sample_vcn_id: "{{ result.vcn.id }}"
#===========================================================================================
- name: Get availability domain for subnets
  oci_identity_availability_domain_facts:
    compartment_id: "{{compartment_id}}"
  register: oci_ads
- set_fact:
    sample_availability_domain_ad1: "{{oci_ads.availability_domains[1].name}}"

- debug: msg="ADs within the ashburn region {{sample_availability_domain_ad1}}"

# ===========================================================================================
- name: Create Internet Gateway
  oci_network_internet_gateway:
    compartment_id: "{{ compartment_id }}"
    vcn_id: '{{ sample_vcn_id }}'
    name: '{{ ig_name }}'
    is_enabled: 'yes'
    state: 'present'
  register: result
- set_fact:
    sample_ig_id: "{{ result.internet_gateway.id }}"
# ===========================================================================================
- name: Create a Route Table
  oci_network_route_table:
    compartment_id: "{{ compartment_id }}"
    vcn_id: '{{ sample_vcn_id }}'
    name: '{{ rt_name }}'
    route_rules:
      - cidr_block: '{{ all_cidr_block }}'
        network_entity_id: '{{ sample_ig_id }}'
    state: 'present'
  register: result

- set_fact:
    sample_rt_id: "{{ result.route_table.id }}"

# ===========================================================================================
- name: Create security list
  oci_network_security_list:
    name: '{{ sec_list_name }}'
    compartment_id: "{{ compartment_id }}"
    vcn_id: '{{ sample_vcn_id }}'
    state: 'present'
    ingress_security_rules:
      # HTTP
      - source: "{{ all_cidr_block }}"
        protocol: "{{ tcp_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ http_port }}"
            max: "{{ http_port }}"
      # SSL/TLS
      - source: "{{ all_cidr_block }}"
        protocol: "{{ tcp_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ https_port }}"
            max: "{{ https_port }}"
    egress_security_rules:
      - destination: "{{ all_cidr_block }}"
        protocol: "{{ all_protocol }}"
  register: result
- set_fact:
    sample_sec_list_id: "{{ result.security_list.id }}"
# ===========================================================================================
- name: Create a subnet in AD1
  oci_network_subnet:
    availability_domain: "{{ sample_availability_domain_ad1 }}"
    dns_label: '{{ sample_subnet_ad1_dnslabel }}'
    route_table_id: '{{ sample_rt_id }}'
    security_list_ids: ['{{ sample_sec_list_id }}']
    cidr_block: "{{ subnet_cidr_block_ad1 }}"
    compartment_id: "{{ compartment_id }}"
    vcn_id: '{{ sample_vcn_id }}'
  register: result

- set_fact:
    sample_subnet_id_ad1: "{{ result.subnet.id }}"

# ===========================================================================================
# Find appropriate image to launch compute instance.
- name: Get images list
  oci_compute_image_facts:
    compartment_id: "{{ compartment_id }}"
    operating_system: "Oracle Linux"
    sort_by: "TIMECREATED"
    sort_order: "ASC"
  register: output

- set_fact:
    sample_app_server_image_id: "{{ item.id }}"
  loop: "{{ output.images }}"
  when:
    - item.display_name.find("GPU") == -1
    - item.display_name.find("aarch64") == -1
#==========================================================================================
- name: Launch First App Server Instance in Availability Domain 1
  oci_compute_instance:
    name: "{{ sample_app_server_instance_one_name }}"
    image_id: "{{ sample_app_server_image_id }}"
    shape: "{{ sample_app_server_shape }}"
    compartment_id: "{{ compartment_id }}"
    availability_domain: "{{ sample_availability_domain_ad1 }}"
    metadata:
      user_data: "{{ lookup('file', '{{ playbook_dir}}/files/user_data.tpl')| b64encode}}"
    create_vnic_details:
      hostname_label: "{{ sample_app_server_instance_one_name }}"
      subnet_id: "{{ sample_subnet_id_ad1 }}"
  register: result

- set_fact:
    sample_app_server_instance_one_id: "{{ result.instance.id }}"
# ===========================================================================================
- name: Get VNIC attachments of App Server Instance 1
  oci_compute_vnic_attachment_facts:
    compartment_id: '{{ compartment_id }}'
    instance_id: '{{ sample_app_server_instance_one_id }}'
  register: vnic_attachment_details

- name: Get Private Ip address of App Server Instance 1
  oci_network_vnic_facts:
    id: '{{ vnic_attachment_details.vnic_attachments[0].vnic_id }}'
  register: vnic_details

- debug:
    msg: "{{ vnic_details }}"

- set_fact:
    sample_app_server_instance_one_private_ip: "{{ vnic_details.vnic.private_ip }}"
# ===========================================================================================