---
# Copyright (c) 2020, 2022 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Check pre-requisites
  fail:
    msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_AD_NAME"

#==========================================================================================
#CREATING THE THE VCN SETUP FOR THE FIRST VCN1

- name: Create the VCN1
  oci_network_vcn:
    compartment_id: "{{ compartment_ocid }}"
    display_name: "{{ vcn1_name }}"
    cidr_block: "{{ vcn1_cidr_block }}"
    dns_label: "{{ vcn1_dns_label }}"
  register: result
- set_fact:
    vcn1_id: "{{ result.vcn.id }}"
    vcn1_default_sec_list_id: "{{ result.vcn.default_security_list_id }}"
    vcn1_default_route_table_id: "{{ result.vcn.default_route_table_id }}"

#==========================================================================================

# Create Local Peering Gatewoy (LPG) to enable the local peering communication between VCN1 and VCN2
- name: Create the LPG for peering for VCN1
  oci_network_local_peering_gateway:
    compartment_id: "{{ compartment_ocid }}"
    display_name: "{{ lpg1_name }}"
    vcn_id: "{{ vcn1_id }}"
  register: result

- set_fact:
    lpg1_id: "{{ result.local_peering_gateway.id }}"

#==========================================================================================
# create internet gateway for VCN1 for ssh access
- name: Create internet gateway for vcn1
  oci_network_internet_gateway:
    display_name: "{{ internet_gateway1_name }}"
    compartment_id: "{{ compartment_ocid }}"
    vcn_id: "{{ vcn1_id }}"
    is_enabled: true
  register: result

- set_fact:
    ig_id: "{{ result.internet_gateway.id }}"

#==========================================================================================

- name: Create route table to connect internet gateway, local peering gateway to the VCN1
  oci_network_route_table:
    compartment_id: "{{ compartment_ocid }}"
    vcn_id: "{{ vcn1_id }}"
    name: "{{ route_table1_name }}"
    route_rules: "{{ route_table1_rules }}"
    state: 'present'
  register: result
- set_fact:
    rt1_id: "{{ result.route_table.id }}"

#==========================================================================================

- name: Update default security_list for VCN1
  oci_network_security_list:
    security_list_id: "{{ vcn1_default_sec_list_id }}"
    ingress_security_rules:
      # Allow incoming SSH connections
      - source: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"
      # add rule for peered VCN resource connections
      - source: "{{ subnet2_cidr }}"
        protocol: "all"
    egress_security_rules:
      # Allow ssh connections outside
      - destination: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"
      - destination: "{{ subnet2_cidr }}"
        protocol: "all"
  register: result
- set_fact:
    instance_security1_list_ocid: "{{ result.security_list.id }}"

#==========================================================================================

- name: Create a subnet to host the public instance. Link security_list and route_table for VCN1
  oci_network_subnet:
    availability_domain: "{{ ad_name }}"
    cidr_block: "{{ subnet1_cidr }}"
    compartment_id: "{{ compartment_ocid }}"
    display_name: "{{ subnet1_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ rt1_id }}"
    security_list_ids: [ "{{ vcn1_default_sec_list_id }}" ]
    vcn_id: '{{ vcn1_id }}'
    dns_label: "{{ subnet1_dns_label }}"
  register: result
- set_fact:
    vcn_subnet1_ocid: "{{ result.subnet.id }}"



#==========================================================================================
#CREATING THE THE VCN SETUP FOR THE SECOND VCN(VCN2)

- name: Create the VCN2
  oci_network_vcn:
    compartment_id: "{{ compartment_ocid }}"
    display_name: "{{ vcn2_name }}"
    cidr_block: "{{ vcn2_cidr_block }}"
    dns_label: "{{ vcn2_dns_label }}"
  register: result
- set_fact:
    vcn2_id: "{{ result.vcn.id }}"
    vcn2_default_sec_list_id: "{{ result.vcn.default_security_list_id }}"
    vcn2_default_route_table_id: "{{ result.vcn.default_route_table_id }}"

#==========================================================================================

# Create the Local Peering Gatewoy (LPG) to enable the local peering communication between VCN2 and VCN1
- name: Create the LPG for peering for VCN2
  oci_network_local_peering_gateway:
    compartment_id: "{{ compartment_ocid }}"
    display_name: "{{ lpg2_name }}"
    vcn_id: "{{ vcn2_id }}"
  register: result
- set_fact:
    lpg2_id: "{{ result.local_peering_gateway.id }}"

#==========================================================================================

- name: Create route table to connect  local peering gateway to the VCN2
  oci_network_route_table:
    compartment_id: "{{ compartment_ocid }}"
    vcn_id: "{{ vcn2_id }}"
    name: "{{ route_table2_name }}"
    route_rules: "{{ route_table2_rules }}"
    state: 'present'
  register: result
- set_fact:
    rt2_id: "{{ result.route_table.id }}"

#==========================================================================================

# Add a security list for allowing access to VCN2
- name: Update default security_list for VCN2
  oci_network_security_list:
    security_list_id: "{{ vcn2_default_sec_list_id }}"
    ingress_security_rules:
      # Allow incoming SSH connections
      - source: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"
      - source: "{{ subnet1_cidr }}"
        protocol: "all"
    egress_security_rules:
      # Allow ssh connections outside
      - destination: "{{ quad_zero_route }}"
        protocol: "{{ TCP_protocol }}"
        tcp_options:
          destination_port_range:
            min: "{{ SSH_port }}"
            max: "{{ SSH_port }}"
      - destination: "{{ subnet1_cidr }}"
        protocol: "all"
  register: result

#==========================================================================================

- name: Create a subnet to host the private instance. Link security_list and route_table in VCN2.
  oci_network_subnet:
    availability_domain: "{{ ad_name }}"
    cidr_block: "{{ subnet2_cidr }}"
    compartment_id: "{{ compartment_ocid }}"
    display_name: "{{ subnet2_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ rt2_id }}"
    security_list_ids: [ "{{ vcn2_default_sec_list_id }}" ]
    vcn_id: '{{ vcn2_id }}'
    dns_label: "{{ subnet2_dns_label }}"
  register: result
- set_fact:
    vcn2_subnet_id: "{{ result.subnet.id }}"